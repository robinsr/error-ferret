---
import type { APIRoute } from 'astro';

export const POST: APIRoute = async ({ request }) => {
  try {
    const formData = await request.formData();
    const code = formData.get('code') as string;
    const language = formData.get('language') as string;
    const focus = formData.get('focus') as string;

    if (!code || code.trim() === '') {
      return new Response(JSON.stringify({ error: 'Code is required' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // TODO: Select appropriate system prompt based on language and focus
    const systemPrompt = `You are an expert code reviewer. Analyze the provided code and provide detailed, constructive feedback. Focus on:
- Code quality and best practices
- Potential bugs or issues
- Performance considerations
- Security concerns
- Readability and maintainability
- Suggestions for improvement

Provide specific line-by-line feedback where appropriate.`;

    const userPrompt = `Please review the following ${language ? language : 'code'}:
${focus ? `Focus area: ${focus}` : ''}

Code:
\`\`\`
${code}
\`\`\`

Please provide a comprehensive code review with specific feedback.`;

    // TODO: Replace with your actual OpenAI API key
    const openaiApiKey = import.meta.env.OPENAI_API_KEY;
    if (!openaiApiKey) {
      return new Response(JSON.stringify({ error: 'OpenAI API key not configured' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 2000,
        temperature: 0.3,
      }),
    });

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.json();
      console.error('OpenAI API error:', errorData);
      return new Response(JSON.stringify({ error: 'Failed to get AI review' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    const openaiData = await openaiResponse.json();
    const review = openaiData.choices[0]?.message?.content || 'No review generated';

    return new Response(JSON.stringify({
      review,
      language: language || 'auto-detected',
      focus: focus || 'general',
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Code review error:', error);
    return new Response(JSON.stringify({ error: 'Internal server error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
};
