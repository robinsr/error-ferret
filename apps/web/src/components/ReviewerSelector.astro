---
import type { FerretReviewer } from '@/reviewers';
import Label from '@/components/InputLabel.astro';
import ReviewerOption from '@/components/ReviewerOption.astro';
import { SELECT_FERRETS } from '@/branding';

interface Props {
  reviewers: readonly FerretReviewer[];
  selectedReviewers?: string[];
}

const { reviewers, selectedReviewers = [] } = Astro.props;
---

<div class="w-full" x-data="reviewerSelector">
  <Label name="reviewers" label="Select Reviewers" />

  <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
    {reviewers.map((reviewer) => {
      const isSelected = selectedReviewers.includes(reviewer.focus);
      return (
        <ReviewerOption reviewer={reviewer} isSelected={isSelected} />
      );
    })}
  </div>

  <!-- Hidden input to store selected reviewers -->
  <input type="hidden" name="selectedReviewers" id="selectedReviewersInput" :value="selectedReviewers.join(',')" />

  <p class="mt-2 text-sm text-gray-500">
    {SELECT_FERRETS}
  </p>
</div>

<script>
  import Alpine from 'alpinejs';

  document.addEventListener('alpine:init', () => {
    Alpine.data('reviewerSelector', () => reviewerSelector());
  });

  function reviewerSelector() {
    return {
      selectedReviewers: [] as string[],

      init() {
        // Initialize with the server-side selected reviewers
        const input = document.getElementById('selectedReviewersInput') as HTMLInputElement;
        if (input && input.value) {
          this.selectedReviewers = input.value.split(',').filter(r => r.trim());
        }
      },

      toggleReviewer(focus: string) {
        if (this.selectedReviewers.includes(focus)) {
          // Remove reviewer
          const index = this.selectedReviewers.indexOf(focus);
          this.selectedReviewers.splice(index, 1);
        } else {
          // Add reviewer
          this.selectedReviewers.push(focus);
        }

        // Update the hidden input
        const input = document.getElementById('selectedReviewersInput') as HTMLInputElement;
        if (input) {
          input.value = this.selectedReviewers.join(',');
        }

        // Update UI
        this.updateReviewerSelection(focus, this.selectedReviewers.includes(focus));
      },

      updateReviewerSelection(focus: string, isSelected: boolean) {
        const button = document.querySelector(`[data-reviewer-focus="${focus}"]`) as HTMLElement;
        if (!button) return;

        if (isSelected) {
          button.classList.remove('border-gray-200', 'bg-white', 'hover:border-gray-300');
          button.classList.add('border-blue-500', 'bg-blue-50', 'shadow-md');

          // Update text colors
          const nameSpan = button.querySelector('span:first-of-type');
          const titleSpan = button.querySelector('span:last-of-type');
          if (nameSpan) nameSpan.classList.replace('text-gray-900', 'text-blue-700');
          if (titleSpan) titleSpan.classList.replace('text-gray-600', 'text-blue-600');

          // Show selection indicator
          const indicator = button.querySelector('.selection-indicator');
          if (indicator) {
            indicator.classList.remove('hidden');
          }
        } else {
          button.classList.remove('border-blue-500', 'bg-blue-50', 'shadow-md');
          button.classList.add('border-gray-200', 'bg-white', 'hover:border-gray-300');

          // Update text colors
          const nameSpan = button.querySelector('span:first-of-type');
          const titleSpan = button.querySelector('span:last-of-type');
          if (nameSpan) nameSpan.classList.replace('text-blue-700', 'text-gray-900');
          if (titleSpan) titleSpan.classList.replace('text-blue-600', 'text-gray-600');

          // Hide selection indicator
          const indicator = button.querySelector('.selection-indicator');
          if (indicator) {
            indicator.classList.add('hidden');
          }
        }
      }
    }
  }
</script>
