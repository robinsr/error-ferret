---
export const prerender = false;

import '@/styles/global.css';
import { CODE_PLACEHOLDER, SUPPORTED_LANGUAGES, EXPERIENCE_LEVEL_OPTIONS } from '@/constants';
import { WAIT_SCREEN } from '@/branding';
import { generateFeedback } from '@/services/openai/feedback';
import type { FeedbackItem as FeedbackItemType, PromptConfig } from '@/types';
import { FERRET_REVIEWERS } from '@/reviewers';
import Layout from '@/layouts/Layout.astro';
import Section from '@/components/Section.astro';
import Features from '@/components/Features.astro';
import Header from '@/components/Header.astro';
import SelectInput from '@/components/SelectInput.astro';
import TextareaInput from '@/components/TextareaInput.astro';
import SubmitButton from '@/components/SubmitButton.astro';
import Feedback from '@/components/Feedback.astro';
import ErrorMsg from '@/components/Error.astro';
import ReviewerSelector from '@/components/ReviewerSelector.astro';
import FileUploadInput from '@/components/FileUploadInput.astro';
import { ZodNull } from 'astro:schema';


let error = '';
const hasError = error !== '';

---

<Layout>
  <div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl mx-auto flex flex-col gap-8">
      <Header />

      <!-- Main Form -->
       <Section title="Submit Code for Review" description="Paste your code below and get instant feedback" colorScheme="blue">

        <form id="reviewForm" class="p-8 space-y-6" enctype="multipart/form-data" x-data="formDataModel">
          <!-- Input Mode Toggle -->
          <div class="flex justify-center">
            <div class="bg-gray-100 p-1 rounded-lg flex">
              <button
                type="button"
                @click="switchToPasteMode"
                :class="inputMode === 'paste' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600 hover:text-gray-900'"
                class="px-6 py-2 rounded-md font-medium transition-all duration-200"
              >
                Paste your code
              </button>
              <button
                type="button"
                @click="switchToUploadMode"
                :class="inputMode === 'upload' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600 hover:text-gray-900'"
                class="px-6 py-2 rounded-md font-medium transition-all duration-200"
              >
                Upload files
              </button>
            </div>
          </div>

          <!-- Code Input Section -->
          <div x-show="inputMode === 'paste'" x-transition>
            <TextareaInput name="code" label="Code to Review" content={''} placeholder={CODE_PLACEHOLDER} />
          </div>

          <!-- File Upload Section -->
          <div x-show="inputMode === 'upload'" x-transition>
            <FileUploadInput />
          </div>

          <!-- Reviewer Selection -->
          <ReviewerSelector reviewers={FERRET_REVIEWERS} />

          <div class="flex items-center justify-center pt-4">
            <SubmitButton />
          </div>
        </form>
      </Section>

      <Features />

      {hasError && (
        <Section title="Error" description="An error occurred while generating feedback" colorScheme="red">
          <ErrorMsg error={error} />
        </Section>
      )}

      <!-- Loading Overlay -->
      <div id="loadingOverlay" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-8 max-w-md mx-4 text-center">
          <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <h3 class="text-xl font-semibold text-gray-900 mb-2">Processing Your Code</h3>
          <p class="text-gray-600">{WAIT_SCREEN}</p>
        </div>
      </div>

    </div>
  </div>
</Layout>

<script>
  import Alpine from 'alpinejs';
  import type { FerretReviewer } from '@/reviewers';

  type InputMode = 'paste' | 'upload';

  document.addEventListener('alpine:init', () => {
    // Alpine.store('')

    Alpine.data('formDataModel', () => formDataModel())
  })

  function formDataModel() {
    return {
      inputMode: 'paste' as InputMode,
      selectedFiles: [] as File[],
      reviewers: [
        'general'
      ],

      switchToPasteMode() {
        this.inputMode = 'paste';
      },

      addReviewer(reviewer: FerretReviewer) {
        this.reviewers.push(reviewer.focus);
      },

      removeReviewer(reviewer: FerretReviewer) {
        this.reviewers = this.reviewers.filter(r => r !== reviewer.focus);
      },

      switchToUploadMode() {
        this.inputMode = 'upload';
      },

      handleFileSelection(input: HTMLInputElement) {
        if (input.files) {
          this.selectedFiles = Array.from(input.files);
        }
      },

      removeFile(index: number) {
        this.selectedFiles.splice(index, 1);

        // Update the file input
        const fileInput = document.getElementById('file-upload') as HTMLInputElement;
        if (fileInput) {
          const dt = new DataTransfer();
          this.selectedFiles.forEach(file => dt.items.add(file));
          fileInput.files = dt.files;
        }
      }
    }
  }


  // Form submission handling
  const form = document.getElementById('reviewForm');
  const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
  const buttonText = document.getElementById('buttonText');
  const loadingOverlay = document.getElementById('loadingOverlay');

  if (form && submitButton && buttonText && loadingOverlay) {
    form.addEventListener('submit', function(e) {
      // Show loading state
      submitButton.disabled = true;
      buttonText.textContent = 'Processing...';
      loadingOverlay.classList.remove('hidden');
    });
  }
</script>
